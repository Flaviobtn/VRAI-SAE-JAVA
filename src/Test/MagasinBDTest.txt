package bd;

import Modele.Magasin;
import Modele.Livre;
import org.junit.*;
import org.junit.runner.RunWith;
import org.mockito.*;

import java.sql.*;
import java.util.*;

import static org.junit.Assert.*;
import static org.mockito.Mockito.*;

public class MagasinBDTest {

    @Mock
    private Connection mockConnection;
    @Mock
    private PreparedStatement mockPreparedStatement;
    @Mock
    private ResultSet mockResultSet;
    @Mock
    private Statement mockStatement;

    private MagasinBD magasinBD;

    @Before
    public void setUp() throws Exception {
        MockitoAnnotations.openMocks(this);
        magasinBD = new MagasinBD(mockConnection);
    }

    @Test
    public void testGetMagasin_ReturnsMagasin() throws Exception {
        when(mockConnection.prepareStatement(anyString())).thenReturn(mockPreparedStatement);
        when(mockPreparedStatement.executeQuery()).thenReturn(mockResultSet);
        when(mockResultSet.next()).thenReturn(true).thenReturn(false);
        when(mockResultSet.getString("idmag")).thenReturn("1");
        when(mockResultSet.getString("nommag")).thenReturn("Fnac");
        when(mockResultSet.getString("villemag")).thenReturn("Paris");

        Magasin mag = magasinBD.getMagasin("1");
        assertNotNull(mag);
        assertEquals("1", mag.getIdmag());
        assertEquals("Fnac", mag.getNomMag());
        assertEquals("Paris", mag.getVilleMag());
    }

    @Test
    public void testGetMagasin_ReturnsNullIfNotFound() throws Exception {
        when(mockConnection.prepareStatement(anyString())).thenReturn(mockPreparedStatement);
        when(mockPreparedStatement.executeQuery()).thenReturn(mockResultSet);
        when(mockResultSet.next()).thenReturn(false);

        Magasin mag = magasinBD.getMagasin("999");
        assertNull(mag);
    }

    @Test
    public void testGetToutLesMagasins_ReturnsList() throws Exception {
        when(mockConnection.createStatement()).thenReturn(mockStatement);
        when(mockStatement.executeQuery(anyString())).thenReturn(mockResultSet);
        when(mockResultSet.next()).thenReturn(true, false);
        when(mockResultSet.getString("idmag")).thenReturn("1");
        // getMagasin will be called inside, so mock it as well
        MagasinBD spyMagasinBD = Mockito.spy(magasinBD);
        doReturn(new Magasin("1", "Fnac", "Paris")).when(spyMagasinBD).getMagasin("1");

        List<Magasin> magasins = spyMagasinBD.getToutLesMagasins();
        assertNotNull(magasins);
        assertEquals(1, magasins.size());
        assertEquals("1", magasins.get(0).getIdmag());
    }

    @Test
    public void testInsertMagasin() throws Exception {
        Magasin mag = mock(Magasin.class);
        when(mag.getIdmag()).thenReturn("2");
        when(mag.getNomMag()).thenReturn("Decitre");
        when(mag.getVilleMag()).thenReturn("Lyon");
        when(mockConnection.prepareStatement(anyString())).thenReturn(mockPreparedStatement);

        magasinBD.insertMagasin(mag);
        verify(mockPreparedStatement, times(1)).executeUpdate();
    }

    @Test
    public void testChiffreAffaire() throws Exception {
        Magasin mag = mock(Magasin.class);
        when(mag.getIdmag()).thenReturn("1");
        when(mockConnection.prepareStatement(anyString())).thenReturn(mockPreparedStatement);
        when(mockPreparedStatement.executeQuery()).thenReturn(mockResultSet);
        when(mockResultSet.next()).thenReturn(true);
        when(mockResultSet.getDouble("chiffre")).thenReturn(1234.56);

        double ca = magasinBD.chiffreAffaire(mag, 2024);
        assertEquals(1234.56, ca, 0.001);
    }

    @Test
    public void testGenererId() throws Exception {
        when(mockConnection.prepareStatement(anyString())).thenReturn(mockPreparedStatement);
        when(mockPreparedStatement.executeQuery()).thenReturn(mockResultSet);
        when(mockResultSet.next()).thenReturn(true);
        when(mockResultSet.getString("max")).thenReturn("5");

        String newId = magasinBD.genererId();
        assertEquals("6", newId);
    }

    @Test
    public void testGetidMag() throws Exception {
        when(mockConnection.createStatement()).thenReturn(mockStatement);
        when(mockStatement.executeQuery(anyString())).thenReturn(mockResultSet);
        when(mockResultSet.next()).thenReturn(true);
        when(mockResultSet.getString("idmag")).thenReturn("3");

        String id = magasinBD.getidMag(mockConnection, "Decitre");
        assertEquals("3", id);
    }

    @Test
    public void testModifQteLivre() throws Exception {
        Magasin mag = mock(Magasin.class);
        Livre livre = mock(Livre.class);
        when(mag.getIdmag()).thenReturn("1");
        when(livre.getIsbn()).thenReturn("1234567890");
        when(mockConnection.prepareStatement(anyString())).thenReturn(mockPreparedStatement);

        magasinBD.modifQteLivre(mag, livre, 10);
        verify(mockPreparedStatement, times(1)).executeUpdate();
    }
}